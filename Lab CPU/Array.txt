#This is the program for solving question 3.
#We initialize a register with the first address (0x0100)
1110010000000000  0001: E400 LDIL R1 0x00;
1110010000000110  0002: E406 ORIH R1 0x01;
#
#We assign the value 1 to the R2 for opearations.
1110100000000100  0003: E804 LDIL R2 0x01;
#
#By adding together the direction given plus 1, we obtain the #direction of the first value to evaluate.
0110110010100000  0004: 6CA0 ADD R3 R1 R2;
#
#We load the value of the first address(0x0100) in a register for #using it as a counter.
0011000010000000  0005: 3080 LD R4 R1 R0;
#
#This is the condition for getting into the loop.
#We compare two register into R0, because since R0 is always 0,
#the rezult of the operation will dissappear, but the condition
#code flags will keep its values (ZNVC)
1000001000000101  0006: 8205 ORs R0 R4 R0;
#
#If(R4==0) go to the end, don't get into the loop.
1100000010000001  0007: C081 BZ 8;
#
#Now are officialy inside of a loop, and the first thing we will
#always do, is loading the value of the pointer R3 into a
#register R5 as data value.
0011010110000000  0008: 3580 LD R5 R3 R0;
#
#We have to decrease the number of total numbers to evaluate, #because we are evaluating one of them.
0111001000101001  0009: 7228 SUB R4 R4 R2;
#
#As we decreased the total number of numbers to evaluate, we have #to add 1 to the pointer of the values to evaluate(R3)
0110110110100000  0010: 6DA0 ADD R3 R3 R2;
#
#We are going to compare the MAX value found (R6) and the actual #number (R5), so if when we do R5-R6 we obtain a positive number, #then R5 is bigger than MAX.
0110001011101100  0011: 62EC SUBs R0 R5 R6;
#
#If the value wasn't a positive number, then in ZNVC N=1 and we #don't need to save the value, so we go back to the beginning of
#the loop for analysing the next number.
1101111110100110  0012: DFA6 BNEG -6;
#
#In the case the result was positive, then in ZNVC N=0 and means
#that the evaluated number is bigger than the actual MAX, so we #want to overwrite the actual MAX with the evaluated number.
1001101011010000  0013: 9AD0 OR R6 R5 R5;
#
#The has always to be an end for all the loops.
1101111110000000  0014: DF80 BALW -8;
#
#We wanted to save the MAX in memory position 0x0300
1111110000000000  0015: FC00 LDIL R7 0x00;
1111110000001010  0016: FC0A ORIH R7 0x02;
#
#This instruction stores the MAX(R6) in the memory position #0x0200.
0101101110010000  0017: 5B90 ST R6 R7 R0;
#
#Finally, we have to fill the memory with some values for testing.
#
ORG 256;
0000000000000101  0100: DATUM 5;
0000000000010000  0101: DATUM 16;
0000001000000000  0102: DATUM 512;
0000000000100000  0103: DATUM 32;
0000000001000000  0104: DATUM 64;
0000000010000000  0105: DATUM 128;
